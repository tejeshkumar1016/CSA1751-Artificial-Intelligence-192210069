import heapq

# Goal state for the 8-puzzle problem
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

# Movements: up, down, left, right
movements = [(-1, 0), (1, 0), (0, -1), (0, 1)]

class Node:
    def __init__(self, state, parent, move, depth, cost):
        self.state = state
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = cost
    
    def __lt__(self, other):
        return self.cost < other.cost

def a_star(start_state):
    open_list = []
    closed_list = set()
    start_node = Node(start_state, None, None, 0, heuristic(start_state))
    heapq.heappush(open_list, start_node)
    
    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(tuple(map(tuple, current_node.state)))
        
        if current_node.state == goal_state:
            return reconstruct_path(current_node)
        
        for move in movements:
            new_state = make_move(current_node.state, move)
            if new_state is None:
                continue
            
            new_node = Node(new_state, current_node, move, current_node.depth + 1, current_node.depth + 1 + heuristic(new_state))
            
            if tuple(map(tuple, new_state)) not in closed_list:
                heapq.heappush(open_list, new_node)
    
    return None

def heuristic(state):
    cost = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                x, y = divmod(state[i][j] - 1, 3)
                cost += abs(x - i) + abs(y - j)
    return cost

def make_move(state, move):
    new_state = [row[:] for row in state]
    x, y = next((i, j) for i in range(3) for j in range(3) if new_state[i][j] == 0)
    dx, dy = move
    nx, ny = x + dx, y + dy
    
    if 0 <= nx < 3 and 0 <= ny < 3:
        new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
        return new_state
    return None

def reconstruct_path(node):
    path = []
    while node:
        path.append(node.state)
        node = node.parent
    return path[::-1]

def print_state(state):
    for row in state:
        print(' '.join(str(tile) if tile != 0 else ' ' for tile in row))
    print()

# Initial state for the 8-puzzle problem
initial_state = [[1, 2, 3],
                 [4, 0, 5],
                 [6, 7, 8]]

solution = a_star(initial_state)
if solution:
    print("Solution found:")
    for step in solution:
        print_state(step)
else:
    print("No solution found")

